<h1>About</h1>
<p>Repo: <a href="https://github.com/mdecycu/cad2025">https://github.com/mdecycu/cad2025</a></p>
<p>Web: <a href="https://mde.tw/cad2025">https://mde.tw/cad2025</a></p>
<p>實習項目:</p>
<p style="padding-left: 30px;">五軸平面連桿機電繪圖系統的設計模擬與製作</p>
<p style="padding-left: 30px;">Design, Simulation, and Development of a Five-Axis Planar Linkage Mechatronic Drawing System</p>
<p>行事曆:</p>
<p>2a 上課時段: 每週五 13:20 - 16:10 (w5 10/10 國慶日放假)</p>
<p>2b 上課時段: 每週二 09:10 - 12:00</p>
<p><a href="https://calendar.google.com/calendar/embed?src=mde.nfu.edu.tw_3439313938333136353439%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;mode=week&amp;src=mde.nfu.edu.tw_35303530373431313438%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;src=yen%40gm.nfu.edu.tw&amp;ctz=Asia%2FTaipei"> 全頁檢視 </a></p>
<p><iframe height="600" src="https://calendar.google.com/calendar/embed?src=mde.nfu.edu.tw_3439313938333136353439%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;mode=week&amp;src=mde.nfu.edu.tw_35303530373431313438%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;src=yen%40gm.nfu.edu.tw&amp;ctz=Asia%2FTaipei" width="800"></iframe></p><h1>CAD</h1>
<p>3D parts and assembly creation:</p>
<p style="padding-left: 30px;">Solvespace: <a href="https://solvespace.com">https://solvespace.com</a></p>
<p style="padding-left: 30px;">Siemens NX: <a href="https://plm.sw.siemens.com/en-US/nx/">https://plm.sw.siemens.com/en-US/nx/</a></p>
<p style="padding-left: 30px;">OnShape: <a href="https://www.onshape.com/en/">https://www.onshape.com/en/</a></p>
<p style="padding-left: 30px;">Blender: <a href="https://www.blender.org/">https://www.blender.org/</a></p>
<p>Control and simulation of mechatronic systems:</p>
<p style="padding-left: 30px;"><a href="https://cyberbotics.com/">https://cyberbotics.com/</a></p>
<h2>Solvespace</h2>
<h2>NX</h2>
<p>NXOpen: <a href="https://github.com/mdecycu/nxopen">https://github.com/mdecycu/nxopen</a></p>
<h2>OnShape</h2>
<p></p>
<h1>Linkage</h1>
<p><a href="https://blog.rectorsquid.com/linkage-mechanism-designer-and-simulator/">https://blog.rectorsquid.com/linkage-mechanism-designer-and-simulator/</a> </p>
<p>5-bar</p>
<p><a href="https://github.com/mdecycu/5-Bar-Parallel-Robot-Kinematics-Simulation">https://github.com/mdecycu/5-Bar-Parallel-Robot-Kinematics-Simulation</a> </p>
<p><a href="https://github.com/mdecycu/parallel-five-bar-robot">https://github.com/mdecycu/parallel-five-bar-robot</a> </p>
<p><a href="https://github.com/mdecycu/five_bar_linkage">https://github.com/mdecycu/five_bar_linkage</a> </p>
<p><a href="https://github.com/mdecycu/Robot-Sketcher-5-bar-parallel-manipulator-">https://github.com/mdecycu/Robot-Sketcher-5-bar-parallel-manipulator-</a> </p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/dvi_3OcbsCI?si=uViJq3nPdyN4Jkda" title="YouTube video player" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/cPmnAHVEEYM?si=1qf8mlXzjz7RzdqQ" title="YouTube video player" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/yubS3_OUhQs?si=QGv55rstovztoQm2" title="YouTube video player" width="560"></iframe></p>
<p><a href="https://link.springer.com/chapter/10.1007/978-3-319-98020-1_28">Kinematic Design of Five-Bar Parallel Robot by Kinematically Defined Performance Index for Energy Consumption</a></p>
<p><a href="https://github.com/Phylliade/ikpy">https://github.com/Phylliade/ikpy</a> </p><h1>Robotics</h1>
<p><a href="https://github.com/Introduction-to-Autonomous-Robots/Introduction-to-Autonomous-Robots">https://github.com/Introduction-to-Autonomous-Robots/Introduction-to-Autonomous-Robots</a></p><h1>Webots</h1>
<p><a href="https://cyberbotics.com/">https://cyberbotics.com/</a></p>
<div class="markdown-body MarkdownRenderer-module__container--wIGWk" data-copilot-markdown="true" style="--markdownrenderer_streaming-fade-duration: 750ms;">
<p><span node="[object Object]">在 Webots 模擬器中，</span><strong><span node="[object Object]">模擬器的時間步長</span></strong><span node="[object Object]">與</span><strong><span node="[object Object]">世界的時間步長</span></strong><span node="[object Object]">是模擬運行的兩個重要概念，分別表示模擬器和模擬世界在離散物理計算中的時間間隔。以下是詳細說明：</span></p>
<hr/><br/><span node="[object Object]">1. </span><strong><span node="[object Object]">模擬器的時間步長（Simulator </span><span node="[object Object]">Time </span><span node="[object Object]">Step）</span></strong>
<ul>
<li><strong><span node="[object Object]">定義</span></strong><span node="[object Object]">：模擬器內部用於計算物理模擬的時間間隔。它決定了模擬器每次更新物理場景時所模擬的時間量。</span></li>
<li><strong><span node="[object Object]">作用</span></strong><span node="[object Object]">：</span>
<ul>
<li><span node="[object Object]">控制系統的精度與性能。</span></li>
<li><span node="[object Object]">計算物理行為（如碰撞、運動等）的關鍵參數。</span></li>
</ul>
</li>
<li><strong><span node="[object Object]">設置方式</span></strong><span node="[object Object]">：模擬器的時間步長通常由模擬控制器中的代碼明確設置。例如，在 Python 控制器中，您可以使用</span><code node="[object Object]"><span node="[object Object]">robot.step(timestep)</span></code><span node="[object Object]">來進行控制。</span></li>
<li><strong><span node="[object Object]">特性</span></strong><span node="[object Object]">：</span>
<ul>
<li><strong><span node="[object Object]">越小</span></strong><span node="[object Object]">：模擬精度越高，但計算負擔增加，模擬速度可能變慢。</span></li>
<li><strong><span node="[object Object]">越大</span></strong><span node="[object Object]">：模擬速度提高，但精度降低，可能導致模擬不穩定。</span></li>
</ul>
</li>
</ul>
<hr/><br/><span node="[object Object]">2. </span><strong><span node="[object Object]">世界的時間步長（World </span><span node="[object Object]">Time </span><span node="[object Object]">Step）</span></strong>
<ul>
<li><strong><span node="[object Object]">定義</span></strong><span node="[object Object]">：模擬世界中用於更新場景的固定時間間隔，主要由 Webots 的場景樹（Scene </span><span node="[object Object]">Tree）中的 </span><code node="[object Object]"><span node="[object Object]">WorldInfo </span><span node="[object Object]">&gt; </span><span node="[object Object]">basicTimeStep</span></code> <span node="[object Object]">參數定義。</span></li>
<li><strong><span node="[object Object]">作用</span></strong><span node="[object Object]">：</span>
<ul>
<li><span node="[object Object]">控制整個模擬場景中物體更新的頻率。</span></li>
<li><span node="[object Object]">決定模擬器每次計算後，虛擬時間向前推進的時間量。</span></li>
</ul>
</li>
<li><strong><span node="[object Object]">設置方式</span></strong><span node="[object Object]">：可以在場景樹的 </span><code node="[object Object]"><span node="[object Object]">WorldInfo </span></code><span node="[object Object]">節點中修改 </span><code node="[object Object]"><span node="[object Object]">basicTimeStep </span></code><span node="[object Object]">參數值。</span></li>
<li><strong><span node="[object Object]">特性</span></strong><span node="[object Object]">：</span>
<ul>
<li><strong><span node="[object Object]">越小</span></strong><span node="[object Object]">：模擬的物理場景更新更加頻繁，但所需計算資源更多。</span></li>
<li><strong><span node="[object Object]">越大</span></strong><span node="[object Object]">：模擬場景更新較少，可能導致物理行為的細節丟失。</span></li>
</ul>
</li>
</ul>
<hr/><br/><span node="[object Object]">3. </span><strong><span node="[object Object]">兩者的關係</span></strong>
<ul>
<li><strong><span node="[object Object]">模擬器的時間步長</span></strong><span node="[object Object]">應該</span><strong><span node="[object Object]">小於或等於</span></strong><span node="[object Object]">世界的時間步長。</span>
<ul>
<li><span node="[object Object]">原因是：模擬器需要在每個世界時間步長內完成多次計算，以確保物理模擬的準確性。</span></li>
<li><span node="[object Object]">如果模擬器的時間步長大於世界的時間步長，可能導致模擬不穩定，甚至出現錯誤。</span></li>
</ul>
</li>
<li><strong><span node="[object Object]">設置建議</span></strong><span node="[object Object]">：</span>
<ul>
<li><span node="[object Object]">一般情況下，模擬器的時間步長可以設置為世界時間步長的一部分（如1/10）。</span></li>
<li><span node="[object Object]">測試不同的時間步長，根據模擬精度與性能需求進行調整。</span></li>
</ul>
</li>
</ul>
<hr/><br/><span node="[object Object]">4. </span><strong><span node="[object Object]">實際應用場景</span></strong>
<ul>
<li><strong><span node="[object Object]">模擬器的時間步長</span></strong><span node="[object Object]">：</span>
<ul>
<li><span node="[object Object]">用於控制機器人的控制器代碼，例如逐步執行機器人的操作或模擬傳感器的更新。</span></li>
</ul>
</li>
<li><strong><span node="[object Object]">世界的時間步長</span></strong><span node="[object Object]">：</span>
<ul>
<li><span node="[object Object]">用於控制整個模擬場景的更新頻率，例如物體的運動、碰撞檢測等。</span></li>
</ul>
</li>
</ul>
<hr/>
<h4>簡單對比</h4>
<table>
<thead>
<tr>
<th><strong><span node="[object Object]">項目</span></strong></th>
<th><strong><span node="[object Object]">模擬器的時間步長</span></strong></th>
<th><strong><span node="[object Object]">世界的時間步長</span></strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong><span node="[object Object]">定義</span></strong></td>
<td><span node="[object Object]">模擬器內部計算的時間間隔</span></td>
<td><span node="[object Object]">模擬世界中場景更新的時間間隔</span></td>
</tr>
<tr>
<td><strong><span node="[object Object]">設置位置</span></strong></td>
<td><span node="[object Object]">控制器代碼中</span></td>
<td><span node="[object Object]">場景樹的</span><code node="[object Object]"><span node="[object Object]">WorldInfo</span></code><span node="[object Object]">節點</span></td>
</tr>
<tr>
<td><strong><span node="[object Object]">影響</span></strong></td>
<td><span node="[object Object]">控制模擬計算的精度與性能</span></td>
<td><span node="[object Object]">控制整個場景的更新頻率</span></td>
</tr>
<tr>
<td><strong><span node="[object Object]">大小關係</span></strong></td>
<td><span node="[object Object]">必須小於或等於世界時間步長</span></td>
<td><span node="[object Object]">可設置為模擬所需的任意值</span></td>
</tr>
</tbody>
</table>
<p><span node="[object Object]">透過合理設置這兩個參數，可以在模擬的精度與性能之間達到平衡。</span></p>
</div>
<h1>Brython</h1>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p></p>