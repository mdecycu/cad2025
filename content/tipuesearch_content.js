var tipuesearch = {"pages": [{'title': 'About', 'text': 'Repo:  https://github.com/mdecycu/cad2025 \n Web:  https://mde.tw/cad2025 \n', 'tags': '', 'url': 'About.html'}, {'title': 'Robotics', 'text': 'https://github.com/Introduction-to-Autonomous-Robots/Introduction-to-Autonomous-Robots   \n', 'tags': '', 'url': 'Robotics.html'}, {'title': 'Webots', 'text': '\n 在 Webots 模擬器中， 模擬器的時間步長 與 世界的時間步長 是模擬運行的兩個重要概念，分別表示模擬器和模擬世界在離散物理計算中的時間間隔。以下是詳細說明： \n \n 1.  模擬器的時間步長（Simulator  Time  Step） \n \n 定義 ：模擬器內部用於計算物理模擬的時間間隔。它決定了模擬器每次更新物理場景時所模擬的時間量。 \n 作用 ： \n \n 控制系統的精度與性能。 \n 計算物理行為（如碰撞、運動等）的關鍵參數。 \n \n \n 設置方式 ：模擬器的時間步長通常由模擬控制器中的代碼明確設置。例如，在 Python 控制器中，您可以使用 robot.step(timestep) 來進行控制。 \n 特性 ： \n \n 越小 ：模擬精度越高，但計算負擔增加，模擬速度可能變慢。 \n 越大 ：模擬速度提高，但精度降低，可能導致模擬不穩定。 \n \n \n \n \n 2.  世界的時間步長（World  Time  Step） \n \n 定義 ：模擬世界中用於更新場景的固定時間間隔，主要由 Webots 的場景樹（Scene  Tree）中的  WorldInfo  >  basicTimeStep   參數定義。 \n 作用 ： \n \n 控制整個模擬場景中物體更新的頻率。 \n 決定模擬器每次計算後，虛擬時間向前推進的時間量。 \n \n \n 設置方式 ：可以在場景樹的  WorldInfo  節點中修改  basicTimeStep  參數值。 \n 特性 ： \n \n 越小 ：模擬的物理場景更新更加頻繁，但所需計算資源更多。 \n 越大 ：模擬場景更新較少，可能導致物理行為的細節丟失。 \n \n \n \n \n 3.  兩者的關係 \n \n 模擬器的時間步長 應該 小於或等於 世界的時間步長。 \n \n 原因是：模擬器需要在每個世界時間步長內完成多次計算，以確保物理模擬的準確性。 \n 如果模擬器的時間步長大於世界的時間步長，可能導致模擬不穩定，甚至出現錯誤。 \n \n \n 設置建議 ： \n \n 一般情況下，模擬器的時間步長可以設置為世界時間步長的一部分（如1/10）。 \n 測試不同的時間步長，根據模擬精度與性能需求進行調整。 \n \n \n \n \n 4.  實際應用場景 \n \n 模擬器的時間步長 ： \n \n 用於控制機器人的控制器代碼，例如逐步執行機器人的操作或模擬傳感器的更新。 \n \n \n 世界的時間步長 ： \n \n 用於控制整個模擬場景的更新頻率，例如物體的運動、碰撞檢測等。 \n \n \n \n \n 簡單對比 \n \n \n \n 項目 \n 模擬器的時間步長 \n 世界的時間步長 \n \n \n \n \n 定義 \n 模擬器內部計算的時間間隔 \n 模擬世界中場景更新的時間間隔 \n \n \n 設置位置 \n 控制器代碼中 \n 場景樹的 WorldInfo 節點 \n \n \n 影響 \n 控制模擬計算的精度與性能 \n 控制整個場景的更新頻率 \n \n \n 大小關係 \n 必須小於或等於世界時間步長 \n 可設置為模擬所需的任意值 \n \n \n \n 透過合理設置這兩個參數，可以在模擬的精度與性能之間達到平衡。', 'tags': '', 'url': 'Webots.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};